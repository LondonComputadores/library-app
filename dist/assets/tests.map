{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","library-app/tests/lint/app.lint-test.js","library-app/tests/lint/templates.template.lint-test.js","library-app/tests/lint/tests.lint-test.js","library-app/tests/test-helper.js","library-app/tests/unit/controllers/contact-test.js","library-app/tests/unit/controllers/index-test.js","library-app/tests/unit/routes/about-test.js","library-app/tests/unit/routes/contact-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define(\"library-app/tests/lint/app.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('ESLint | app');\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('controllers/contact.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/contact.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('controllers/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/index.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/about.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/about.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/contact.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/contact.js should pass ESLint\\n\\n');\n  });\n});","define(\"library-app/tests/lint/templates.template.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('TemplateLint');\n  QUnit.test('library-app/templates/about.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'library-app/templates/about.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('library-app/templates/application.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'library-app/templates/application.hbs should pass TemplateLint.\\n\\nlibrary-app/templates/application.hbs\\n  12:8  error  You are using the component {{link-to}} with curly component syntax. You should use <LinkTo> instead. If it is actually a helper you must manually add it to the \\'no-curly-component-invocation\\' rule configuration, e.g. `\\'no-curly-component-invocation\\': { allow: [\\'link-to\\'] }`.  no-curly-component-invocation\\n  13:8  error  You are using the component {{link-to}} with curly component syntax. You should use <LinkTo> instead. If it is actually a helper you must manually add it to the \\'no-curly-component-invocation\\' rule configuration, e.g. `\\'no-curly-component-invocation\\': { allow: [\\'link-to\\'] }`.  no-curly-component-invocation\\n  14:8  error  You are using the component {{link-to}} with curly component syntax. You should use <LinkTo> instead. If it is actually a helper you must manually add it to the \\'no-curly-component-invocation\\' rule configuration, e.g. `\\'no-curly-component-invocation\\': { allow: [\\'link-to\\'] }`.  no-curly-component-invocation\\n  19:14  error  You are using the component {{link-to}} with curly component syntax. You should use <LinkTo> instead. If it is actually a helper you must manually add it to the \\'no-curly-component-invocation\\' rule configuration, e.g. `\\'no-curly-component-invocation\\': { allow: [\\'link-to\\'] }`.  no-curly-component-invocation\\n  20:14  error  You are using the component {{link-to}} with curly component syntax. You should use <LinkTo> instead. If it is actually a helper you must manually add it to the \\'no-curly-component-invocation\\' rule configuration, e.g. `\\'no-curly-component-invocation\\': { allow: [\\'link-to\\'] }`.  no-curly-component-invocation\\n  21:14  error  You are using the component {{link-to}} with curly component syntax. You should use <LinkTo> instead. If it is actually a helper you must manually add it to the \\'no-curly-component-invocation\\' rule configuration, e.g. `\\'no-curly-component-invocation\\': { allow: [\\'link-to\\'] }`.  no-curly-component-invocation\\n  23:12  error  HTML comment detected  no-html-comments\\n  24:10  error  HTML comment detected  no-html-comments\\n');\n  });\n  QUnit.test('library-app/templates/contact.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'library-app/templates/contact.hbs should pass TemplateLint.\\n\\nlibrary-app/templates/contact.hbs\\n  10:56  error  Do not use `action` as <button {{action ...}} />. Instead, use the `on` modifier and `fn` helper.  no-action\\n  14:55  error  Do not use `action` as <button {{action ...}} />. Instead, use the `on` modifier and `fn` helper.  no-action\\n  7:7  error  You are using the component {{input}} with curly component syntax. You should use <Input> instead. If it is actually a helper you must manually add it to the \\'no-curly-component-invocation\\' rule configuration, e.g. `\\'no-curly-component-invocation\\': { allow: [\\'input\\'] }`.  no-curly-component-invocation\\n  19:38  error  You are using the component {{responseMessage}} with curly component syntax. You should use <ResponseMessage> instead. If it is actually a helper you must manually add it to the \\'no-curly-component-invocation\\' rule configuration, e.g. `\\'no-curly-component-invocation\\': { allow: [\\'responseMessage\\'] }`.  no-curly-component-invocation\\n  3:17  error  Ambiguous path \\'Us:\\' is not allowed. Use \\'@Us:\\' if it is a named argument or \\'this.Us:\\' if it is a property on \\'this\\'. If it is a helper or component that has no arguments you must manually add it to the \\'no-implicit-this\\' rule configuration, e.g. \\'no-implicit-this\\': { allow: [\\'Us:\\'] }.  no-implicit-this\\n  7:34  error  Ambiguous path \\'emailAddress\\' is not allowed. Use \\'@emailAddress\\' if it is a named argument or \\'this.emailAddress\\' if it is a property on \\'this\\'. If it is a helper or component that has no arguments you must manually add it to the \\'no-implicit-this\\' rule configuration, e.g. \\'no-implicit-this\\': { allow: [\\'emailAddress\\'] }.  no-implicit-this\\n  10:95  error  Ambiguous path \\'isDisabled\\' is not allowed. Use \\'@isDisabled\\' if it is a named argument or \\'this.isDisabled\\' if it is a property on \\'this\\'. If it is a helper or component that has no arguments you must manually add it to the \\'no-implicit-this\\' rule configuration, e.g. \\'no-implicit-this\\': { allow: [\\'isDisabled\\'] }.  no-implicit-this\\n  14:91  error  Ambiguous path \\'isDisabled\\' is not allowed. Use \\'@isDisabled\\' if it is a named argument or \\'this.isDisabled\\' if it is a property on \\'this\\'. If it is a helper or component that has no arguments you must manually add it to the \\'no-implicit-this\\' rule configuration, e.g. \\'no-implicit-this\\': { allow: [\\'isDisabled\\'] }.  no-implicit-this\\n  18:7  error  Ambiguous path \\'responseMessage\\' is not allowed. Use \\'@responseMessage\\' if it is a named argument or \\'this.responseMessage\\' if it is a property on \\'this\\'. If it is a helper or component that has no arguments you must manually add it to the \\'no-implicit-this\\' rule configuration, e.g. \\'no-implicit-this\\': { allow: [\\'responseMessage\\'] }.  no-implicit-this\\n  19:40  error  Ambiguous path \\'responseMessage\\' is not allowed. Use \\'@responseMessage\\' if it is a named argument or \\'this.responseMessage\\' if it is a property on \\'this\\'. If it is a helper or component that has no arguments you must manually add it to the \\'no-implicit-this\\' rule configuration, e.g. \\'no-implicit-this\\': { allow: [\\'responseMessage\\'] }.  no-implicit-this\\n  10:7  error  All `<button>` elements should have a valid `type` attribute  require-button-type\\n  14:6  error  All `<button>` elements should have a valid `type` attribute  require-button-type\\n');\n  });\n  QUnit.test('library-app/templates/index.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'library-app/templates/index.hbs should pass TemplateLint.\\n\\nlibrary-app/templates/index.hbs\\n  14:56  error  Do not use `action` as <button {{action ...}} />. Instead, use the `on` modifier and `fn` helper.  no-action\\n  3:7  error  You are using the component {{headerMessage}} with curly component syntax. You should use <HeaderMessage> instead. If it is actually a helper you must manually add it to the \\'no-curly-component-invocation\\' rule configuration, e.g. `\\'no-curly-component-invocation\\': { allow: [\\'headerMessage\\'] }`.  no-curly-component-invocation\\n  11:7  error  You are using the component {{input}} with curly component syntax. You should use <Input> instead. If it is actually a helper you must manually add it to the \\'no-curly-component-invocation\\' rule configuration, e.g. `\\'no-curly-component-invocation\\': { allow: [\\'input\\'] }`.  no-curly-component-invocation\\n  19:38  error  You are using the component {{responseMessage}} with curly component syntax. You should use <ResponseMessage> instead. If it is actually a helper you must manually add it to the \\'no-curly-component-invocation\\' rule configuration, e.g. `\\'no-curly-component-invocation\\': { allow: [\\'responseMessage\\'] }`.  no-curly-component-invocation\\n  3:9  error  Ambiguous path \\'headerMessage\\' is not allowed. Use \\'@headerMessage\\' if it is a named argument or \\'this.headerMessage\\' if it is a property on \\'this\\'. If it is a helper or component that has no arguments you must manually add it to the \\'no-implicit-this\\' rule configuration, e.g. \\'no-implicit-this\\': { allow: [\\'headerMessage\\'] }.  no-implicit-this\\n  11:34  error  Ambiguous path \\'emailAddress\\' is not allowed. Use \\'@emailAddress\\' if it is a named argument or \\'this.emailAddress\\' if it is a property on \\'this\\'. If it is a helper or component that has no arguments you must manually add it to the \\'no-implicit-this\\' rule configuration, e.g. \\'no-implicit-this\\': { allow: [\\'emailAddress\\'] }.  no-implicit-this\\n  14:95  error  Ambiguous path \\'isDisabled\\' is not allowed. Use \\'@isDisabled\\' if it is a named argument or \\'this.isDisabled\\' if it is a property on \\'this\\'. If it is a helper or component that has no arguments you must manually add it to the \\'no-implicit-this\\' rule configuration, e.g. \\'no-implicit-this\\': { allow: [\\'isDisabled\\'] }.  no-implicit-this\\n  18:9  error  Ambiguous path \\'responseMessage\\' is not allowed. Use \\'@responseMessage\\' if it is a named argument or \\'this.responseMessage\\' if it is a property on \\'this\\'. If it is a helper or component that has no arguments you must manually add it to the \\'no-implicit-this\\' rule configuration, e.g. \\'no-implicit-this\\': { allow: [\\'responseMessage\\'] }.  no-implicit-this\\n  19:40  error  Ambiguous path \\'responseMessage\\' is not allowed. Use \\'@responseMessage\\' if it is a named argument or \\'this.responseMessage\\' if it is a property on \\'this\\'. If it is a helper or component that has no arguments you must manually add it to the \\'no-implicit-this\\' rule configuration, e.g. \\'no-implicit-this\\': { allow: [\\'responseMessage\\'] }.  no-implicit-this\\n  14:7  error  All `<button>` elements should have a valid `type` attribute  require-button-type\\n');\n  });\n});","define(\"library-app/tests/lint/tests.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('ESLint | tests');\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/controllers/contact-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/contact-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/controllers/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/index-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/routes/about-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/about-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/routes/contact-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/contact-test.js should pass ESLint\\n\\n');\n  });\n});","define(\"library-app/tests/test-helper\", [\"library-app/app\", \"library-app/config/environment\", \"@ember/test-helpers\", \"ember-qunit\"], function (_app, _environment, _testHelpers, _emberQunit) {\n  \"use strict\";\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n  (0, _emberQunit.start)();\n});","define(\"library-app/tests/unit/controllers/contact-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Controller | contact', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:contact');\n      assert.ok(controller);\n    });\n  });\n});","define(\"library-app/tests/unit/controllers/index-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Controller | index', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:index');\n      assert.ok(controller);\n    });\n  });\n});","define(\"library-app/tests/unit/routes/about-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | about', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:about');\n      assert.ok(route);\n    });\n  });\n});","define(\"library-app/tests/unit/routes/contact-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | contact', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:contact');\n      assert.ok(route);\n    });\n  });\n});","define('library-app/config/environment', [], function() {\n  var prefix = 'library-app';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(decodeURIComponent(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('library-app/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}